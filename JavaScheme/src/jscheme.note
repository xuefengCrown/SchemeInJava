
## Read and write. 
The reader goes in the InputPort class.


## 解释器是什么
解释器是一个函数，你输入一个“表达式”，它就输出一个 “值”
表达式是一种“表象”或者“符号”，而值却更加接近“本质”或者“意义”。我们“解释”了符号，得到它的意义，这也许就是为什么它叫做“解释器”。

需要注意的是，表达式是一个数据结构，而不是一个字符串。我们用一种叫“S 表达式”（S-expression）的结构来存储表达式。
比如表达式 '(+ 1 2) 其实是一个链表（list），它里面的内容是三个符号（symbol）：+, 1 和 2，而不是字符串"(+ 1 2)"。

从 S 表达式这样的“结构化数据”里提取信息，方便又可靠，而从字符串里提取信息，麻烦而且容易出错。
Scheme（Lisp）语言里面大量使用结构化数据，少用字符串，这是 Lisp 系统比 Unix 系统先进的地方之一。

## 抽象语法树（Abstract Syntax Tree）
用 S 表达式所表示的代码，本质上是一种叫做“树”（tree）的数据结构。
更具体一点，这叫做“抽象语法树”（Abstract Syntax Tree，简称 AST）。
下文为了简洁，我们省略掉“抽象”两个字，就叫它“语法树”。

跟普通的树结构一样，语法树里的节点，要么是一个“叶节点”，要么是一颗“子树”。
叶节点是不能再细分的“原子”，比如数字，字符串，操作符，变量名。
而子树是可以再细分的“结构”，比如算术表达式，函数定义，函数调用，等等。

## 树遍历算法
在基础的数据结构课程里，我们都学过二叉树的遍历操作，也就是所谓先序遍历，中序遍历和后序遍历。
语法树跟二叉树，其实没有很大区别，所以你也可以在它上面进行遍历。
解释器的算法，就是在语法树上的一种遍历操作。
由于这个渊源关系，我们先来做一个遍历二叉树的练习。做好了之后，我们就可以把这段代码扩展成一个解释器。

## 词法分析、语法分析器(正则和上下文无关文法)
### 词法分析
词法分析，产生记号流
1. token 的类型, 如何提取token?

这与 scheme特有的简洁的语法形式有关, scheme 语法的典型特征是---层层检讨的括号()
因为scheme语法的特殊性, 我们构造的 Pair 天然的就是一棵 语法树, 不需要进行后续的语义分析来构建
语法树了。
2. 为什么用 Pair 来存储表达式?
3. read() && readTail() 是如何来构建 Pair 的?
Together, these mutually recursive(互递归) functions parse Scheme tokens into our interpreter's 
internal Python representation of Scheme expressions. 












